{{ define "base" }}
<!DOCTYPE html>
<html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
      <title>My nice page</title>

      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/css/datepicker-bs5.min.css">
      <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
      <link rel="stylesheet" type="text/css" href="/static/css/styles.css">

      <style>
        .btn-outline-secondary {
          color: red;
          border-color: #6c757d;
        }

        .paraClass {
          font-size: 3em;
        }

        .secondClass {
          color: red;
        }

        #lastPara {
          text-decoration: underline;
        }
      </style>

  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid">
      <a class="navbar-brand" href="#">Navbar</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
              aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item active">
                  <a class="nav-link active" aria-current="page" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/about">About</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                      data-bs-toggle="dropdown" aria-expanded="false">
                        Rooms
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
                        <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/search-availability">Search Availability</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/contact">Contact</a>
                </li>

            </ul>
        </div>
      </div>
  </nav>
      {{ block "content" . }}

      {{ end }}

      <footer class="my-footer">
          <div class="row">
              <div class="col">
              Left
              </div>
              <div class="col">
              Middle
              </div>
              <div class="col">
              Right
              </div>
          </div>
        </footer>
        
          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>

          <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js" integrity="sha384-mQ93GR66B00ZXjt0YO5KlohRA5SY2XofN4zfuZxLkoj1gXtW8ANNCe9d5Y3eG5eD" crossorigin="anonymous"></script>

          <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>
          <script src="https://unpkg.com/notie"></script>
          <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

          {{ block "js" . }}

          {{ end }}
            
        
          <script>
          let attention = Prompt();

          (function () {
              'use strict';
              window.addEventListener('load', function () {
                  // Fetch all the forms we want to apply custom Bootstrap validation styles to
                  let forms = document.getElementsByClassName('needs-validation');
                  // Loop over them and prevent submission
                  Array.prototype.filter.call(forms, function (form) {
                      form.addEventListener('submit', function (event) {
                          if (form.checkValidity() === false) {
                              event.preventDefault();
                              event.stopPropagation();
                          }
                          form.classList.add('was-validated');
                      }, false);
                  });
              }, false);
          })();
      
          function notify(msg, msgType) {
              notie.alert({
              type: msgType,
              text: msg,
              })
          }
      
          function notifyModel(title, text, icon, confirmationButtonText) {
              Swal.fire({
              title: title,
              html: text,
              icon: icon,
              confirmButtonText: confirmationButtonText
              })
          }
          
          {{with .Error}}
          notify("{{.}}", "error")
          {{end}}

          {{with .Flash}}
          notify("{{.}}", "success")
          {{end}}

          {{with .Warning}}
          notify("{{.}}", "warning")
          {{end}}
      
          function Prompt() {
              let toast = function (c) {
              const {
                  msg = "",
                  icon = "success",
                  position = "top-end",
              } = c;
      
              const Toast = Swal.mixin({
                  toast: true,
                  title: msg,
                  position: position,
                  icon: icon,
                  showConfirmButton: false,
                  timer: 3000,
                  timerProgressBar: true,
                  didOpen: (toast) => {
                    toast.addEventListener("mouseenter", Swal.stopTimer)
                    toast.addEventListener("mouseleave", Swal.resumeTimer)
                  }
              })
              Toast.fire({})
              }
              let success = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c

                Swal.fire({
                    icon: 'success',
                    title: title,
                    text: msg,
                    footer: footer,
                })

            }

            let error = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c

                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: msg,
                    footer: footer,
                })

            }
              async function custom(c) {
              const {
                  msg = "",
                  title = "",
              } = c;
      
              const { value: result } = await Swal.fire({
                  title: title,
                  html: msg,
                  backdrop: false,
                  focusConfirm: false,
                  showCancelButton: true,
                  willOpen: () => {
                    if (c.willOpen !== undefined) {
                      c.willOpen();
                    }
                  },
                  didOpen: () => {
                    if (c.didOpen !== undefined) {
                      c.didOpen();
                    }
                  },
                  preConfirm: () => {
                  return [
                      document.getElementById('start').value,
                      document.getElementById('end').value
                  ]
                  }

              })
              if (result) {
                  if (result.dismiss !== Swal.DismissReason.cancel) {
                      if (result.value !== "") {
                          if (c.callback !== undefined) {
                              c.callback(result);
                          }
                      } else {
                        c.callback(false);
                      }
                  }else {
                    c.callback(false);
                  }
                } 
              }
      
              return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
              }
          }
          </script>
  </body>
      
</html>

{{ end }}